abline(h = true_w_Ser_E, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_I, type="l", xlab="iteration", ylab="w_Ser_I", ylim=c(0, max(pmcmc_res$w_Ser_I)))
abline(h = true_w_Ser_I, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_H, type="l", xlab="iteration", ylab="w_Ser_H", ylim=c(0, max(pmcmc_res$w_Ser_H)))
abline(h = true_w_Ser_H, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_R, type="l", xlab="iteration", ylab="w_Ser_R", ylim=c(0, max(pmcmc_res$w_Ser_R)))
abline(h = true_w_Ser_R, col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_H), type="l", xlab="iteration", ylab="prob_Penn_H", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_H))))
abline(h = inv.logit(true_logit_prob_Penn_H), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_R), type="l", xlab="iteration", ylab="prob_Penn_R", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_R))))
abline(h = inv.logit(true_logit_prob_Penn_R), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_D), type="l", xlab="iteration", ylab="prob_Penn_D", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_D))))
abline(h = inv.logit(true_logit_prob_Penn_D), col="red")
dev.off()
rw.sd <- c(logit_Beta=0.3,
logit_phi=0.3,
logit_psi=0.3,
logit_gamma_one=0.3,
logit_gamma_two=0.3,
logit_theta_one=0.3,
logit_theta_two=0.3,
logit_eta=0.3,
sample_size_RNA=0,
sample_size_Ser=0,
w_RNA_S=1,
w_RNA_R=1,
w_RNA_E=1,
w_RNA_I=1,
w_RNA_H=1,
w_Ser_S=1,
w_Ser_E=1,
w_Ser_I=1,
w_Ser_H=1,
w_Ser_R=1,
logit_prob_Penn_H=0.3,
logit_prob_Penn_R=0.3,
logit_prob_Penn_D=0.3,
N=0)
foreach (theta=iter(p,"row"),
.combine=rbind,
.inorder=FALSE) %dopar% {
library(pomp)
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior,
params=theta
) -> covid_pomp
covid_pomp %>% pmcmc(
start = theta,
Nmcmc = 5000,
Np = 100,
proposal = mvn.diag.rw(rw.sd)
) -> pmcmc
as.data.frame(pmcmc@traces)
} -> pmcmc_res
warnings()
rw.sd <- c(logit_Beta=0.1,
logit_phi=0.1,
logit_psi=0.1,
logit_gamma_one=0.1,
logit_gamma_two=0.1,
logit_theta_one=0.1,
logit_theta_two=0.1,
logit_eta=0.1,
sample_size_RNA=0,
sample_size_Ser=0,
w_RNA_S=0.2,
w_RNA_R=0.2,
w_RNA_E=0.2,
w_RNA_I=0.2,
w_RNA_H=0.2,
w_Ser_S=0.2,
w_Ser_E=0.2,
w_Ser_I=0.2,
w_Ser_H=0.2,
w_Ser_R=0.2,
logit_prob_Penn_H=0.1,
logit_prob_Penn_R=0.1,
logit_prob_Penn_D=0.1,
N=0)
foreach (theta=iter(p,"row"),
.combine=rbind,
.inorder=FALSE) %dopar% {
library(pomp)
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior,
params=theta
) -> covid_pomp
covid_pomp %>% pmcmc(
start = theta,
Nmcmc = 5000,
Np = 100,
proposal = mvn.diag.rw(rw.sd)
) -> pmcmc
as.data.frame(pmcmc@traces)
} -> pmcmc_res
rw.sd <- c(logit_Beta=0.1,
logit_phi=0.1,
logit_psi=0.1,
logit_gamma_one=0.1,
logit_gamma_two=0.1,
logit_theta_one=0.1,
logit_theta_two=0.1,
logit_eta=0.1,
sample_size_RNA=0,
sample_size_Ser=0,
w_RNA_S=0.02,
w_RNA_R=0.02,
w_RNA_E=0.02,
w_RNA_I=0.02,
w_RNA_H=0.02,
w_Ser_S=0.02,
w_Ser_E=0.02,
w_Ser_I=0.02,
w_Ser_H=0.02,
w_Ser_R=0.02,
logit_prob_Penn_H=0.1,
logit_prob_Penn_R=0.1,
logit_prob_Penn_D=0.1,
N=0)
rw.sd <- c(logit_Beta=0.1,
logit_phi=0.1,
logit_psi=0.1,
logit_gamma_one=0.1,
logit_gamma_two=0.1,
logit_theta_one=0.1,
logit_theta_two=0.1,
logit_eta=0.1,
sample_size_RNA=0,
sample_size_Ser=0,
w_RNA_S=0.02,
w_RNA_R=0.02,
w_RNA_E=0.02,
w_RNA_I=0.02,
w_RNA_H=0.02,
w_Ser_S=0.02,
w_Ser_E=0.02,
w_Ser_I=0.02,
w_Ser_H=0.02,
w_Ser_R=0.02,
logit_prob_Penn_H=0.1,
logit_prob_Penn_R=0.1,
logit_prob_Penn_D=0.1,
N=0)
foreach (theta=iter(p,"row"),
.combine=rbind,
.inorder=FALSE) %dopar% {
library(pomp)
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior,
params=theta
) -> covid_pomp
covid_pomp %>% pmcmc(
start = theta,
Nmcmc = 5000,
Np = 100,
proposal = mvn.diag.rw(rw.sd)
) -> pmcmc
as.data.frame(pmcmc@traces)
} -> pmcmc_res
write.csv(pmcmc_res, paste0("~/Philly_Covid/pomp/data/parameter_recovery/parameter_recovery.csv"))
pmcmc_res <- read.csv(paste0("~/Philly_Covid/pomp/data/parameter_recovery/parameter_recovery.csv"))
best_log_lik_param_set <- pmcmc_res[tail(which(pmcmc_res$loglik == max(pmcmc_res$loglik)), 1),]
posterior_logit_Beta=best_log_lik_param_set$logit_Beta
posterior_logit_phi=best_log_lik_param_set$logit_phi
posterior_logit_psi=best_log_lik_param_set$logit_psi
posterior_logit_gamma_one=best_log_lik_param_set$logit_gamma_one
posterior_logit_gamma_two=best_log_lik_param_set$logit_gamma_two
posterior_logit_theta_one=best_log_lik_param_set$logit_theta_one
posterior_logit_theta_two=best_log_lik_param_set$logit_theta_two
posterior_logit_eta=best_log_lik_param_set$logit_eta
posterior_w_RNA_S=best_log_lik_param_set$w_RNA_S
posterior_w_RNA_R=best_log_lik_param_set$w_RNA_R
posterior_w_RNA_E=best_log_lik_param_set$w_RNA_E
posterior_w_RNA_I=best_log_lik_param_set$w_RNA_I
posterior_w_RNA_H=best_log_lik_param_set$w_RNA_H
posterior_w_Ser_S=best_log_lik_param_set$w_Ser_S
posterior_w_Ser_E=best_log_lik_param_set$w_Ser_E
posterior_w_Ser_I=best_log_lik_param_set$w_Ser_I
posterior_w_Ser_H=best_log_lik_param_set$w_Ser_H
posterior_w_Ser_R=best_log_lik_param_set$w_Ser_R
posterior_logit_prob_Penn_H=best_log_lik_param_set$logit_prob_Penn_H
posterior_logit_prob_Penn_R=best_log_lik_param_set$logit_prob_Penn_R
posterior_logit_prob_Penn_D=best_log_lik_param_set$logit_prob_Penn_D
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior
) -> covid_pomp
covid_pomp %>%
simulate(params=c(logit_Beta=posterior_logit_Beta,
logit_phi=posterior_logit_phi,
logit_psi=posterior_logit_psi,
logit_gamma_one=posterior_logit_gamma_one,
logit_gamma_two=posterior_logit_gamma_two,
logit_theta_one=posterior_logit_theta_one,
logit_theta_two=posterior_logit_theta_two,
logit_eta=posterior_logit_eta,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=posterior_w_RNA_S,
w_RNA_R=posterior_w_RNA_R,
w_RNA_E=posterior_w_RNA_E,
w_RNA_I=posterior_w_RNA_I,
w_RNA_H=posterior_w_RNA_H,
w_Ser_S=posterior_w_Ser_S,
w_Ser_E=posterior_w_Ser_E,
w_Ser_I=posterior_w_Ser_I,
w_Ser_H=posterior_w_Ser_H,
w_Ser_R=posterior_w_Ser_R,
logit_prob_Penn_H=posterior_logit_prob_Penn_H,
logit_prob_Penn_R=posterior_logit_prob_Penn_R,
logit_prob_Penn_D=posterior_logit_prob_Penn_D,
N=10000),
nsim=1,
format="data.frame",
include.data = TRUE) -> posterior_sims
covid_pomp %>%
simulate(params=c(logit_Beta=true_logit_Beta,
logit_phi=true_logit_phi,
logit_psi=true_logit_psi,
logit_gamma_one=true_logit_gamma_one,
logit_gamma_two=true_logit_gamma_two,
logit_theta_one=true_logit_theta_one,
logit_theta_two=true_logit_theta_two,
logit_eta=true_logit_eta,
sample_size_RNA=25, sample_size_Ser=50,
w_RNA_S=true_w_RNA_S,
w_RNA_R=true_w_RNA_R,
w_RNA_E=true_w_RNA_E,
w_RNA_I=true_w_RNA_I,
w_RNA_H=true_w_RNA_H,
w_Ser_S=true_w_Ser_S,
w_Ser_E=true_w_Ser_E,
w_Ser_I=true_w_Ser_I,
w_Ser_H=true_w_Ser_H,
w_Ser_R=true_w_Ser_R,
logit_prob_Penn_H=true_logit_prob_Penn_H,
logit_prob_Penn_R=true_logit_prob_Penn_R,
logit_prob_Penn_D=true_logit_prob_Penn_D,
N=10000),
nsim=1,
format="data.frame",
include.data = TRUE) -> true_sims
pdf(paste0("~/Philly_Covid/pomp/results/traces/traces.pdf"), width=20, height=20)
par(mfrow=c(4,4))
for (type_dynamics in c("true", "posterior")) {
if (type_dynamics == "true") {
sims <- true_sims
} else {
sims <- posterior_sims
}
# Plot epidemic dynamics -------------------------------------------------------
for (i in 1:length(unique(sims$.id))) {
if (as.character(unique(sims$.id)[i] != "data")) {
sim <- sims[which(sims$.id == unique(sims$.id)[i]),]
if (i == 2) {
plot(sim$day, sim$I, ylim=c(0,10000), type="l", col="red",
main="Philly COVID-19 dynamics", ylab="# in compartment", xlab="day")
lines(sim$day, sim$R, col="blue")
lines(sim$day, sim$S, col="black")
lines(sim$day, sim$E, col="green")
lines(sim$day, sim$H, col="yellow")
lines(sim$day, sim$D, col="purple")
} else {
# Need to add code to plot subsequent simulations if more than one
}
}
}
# Plot testing dynamics --------------------------------------------------------
for (i in 1:length(unique(sims$.id))) {
if (as.character(unique(sims$.id)[i] != "data")) {
sim <- sims[which(sims$.id == unique(sims$.id)[i]),]
if (i == 2) {
# RNA data plot ----------------------------------------------------
RNA_data <- do.call(rbind, list("neg_RNA"=sim$neg_RNA,
"pos_RNA_E"=sim$pos_RNA_E,
"pos_RNA_I"=sim$pos_RNA_I,
"pos_RNA_H"=sim$pos_RNA_H))
colnames(RNA_data) = as.character(sim$day)
barplot(RNA_data,
col=c("grey","green","red","blue"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="RNA data",
legend=T,
args.legend = list(x='bottomright'))
# Ser data plot ----------------------------------------------------
Ser_data <- do.call(rbind, list("neg_Ser"=sim$neg_Ser,
"pos_Ser_I"=sim$pos_Ser_I,
"pos_Ser_H"=sim$pos_Ser_H,
"pos_Ser_R"=sim$pos_Ser_R))
colnames(Ser_data) <- as.character(sim$day)
barplot(Ser_data,
col=c("grey","red","blue","purple"),
border="white",
space=0.04,
font.axis=2,
xlab="day",
ylab="# tests",
main="Serology data",
legend=T)
# Penn EHR ---------------------------------------------------------
EHR_data <- do.call(rbind, list("reports_Penn_H"=sim$reports_Penn_H,
"reports_Penn_R"=sim$reports_Penn_R,
"reports_Penn_D"=sim$reports_Penn_D))
colnames(EHR_data) <- as.character(sim$day)
barplot(EHR_data,
col=c("red","blue","black") ,
border="white",
font.axis=2,
beside=T,
ylim=c(0, max(sim$reports_Penn_H, sim$reports_Penn_R, sim$reports_Penn_D)),
legend=rownames(EHR_data),
xlab="day",
font.lab=2,
args.legend = list(x='topleft'))
} else {
# Need to add code to plot subsequent simulations if more than one
}
}
}
}
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_Beta), type="l", xlab="iteration", ylab="Beta", ylim=c(0, max(inv.logit(pmcmc_res$logit_Beta))))
abline(h = inv.logit(true_logit_Beta), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_phi), type="l", xlab="iteration", ylab="phi", ylim=c(0, max(inv.logit(pmcmc_res$logit_phi))))
abline(h = inv.logit(true_logit_phi), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_psi), type="l", xlab="iteration", ylab="psi", ylim=c(0, max(inv.logit(pmcmc_res$logit_psi))))
abline(h = inv.logit(true_logit_psi), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_gamma_one), type="l", xlab="iteration", ylab="gamma_one", ylim=c(0, max(inv.logit(pmcmc_res$logit_gamma_one))))
abline(h = inv.logit(true_logit_gamma_one), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_gamma_two), type="l", xlab="iteration", ylab="gamma_two", ylim=c(0, max(inv.logit(pmcmc_res$logit_gamma_two))))
abline(h = inv.logit(true_logit_gamma_two), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_theta_one), type="l", xlab="iteration", ylab="theta_one", ylim=c(0, max(inv.logit(pmcmc_res$logit_theta_one))))
abline(h = inv.logit(true_logit_theta_one), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_theta_two), type="l", xlab="iteration", ylab="theta_two", ylim=c(0, max(inv.logit(pmcmc_res$logit_theta_two))))
abline(h = inv.logit(true_logit_theta_two), col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_S, type="l", xlab="iteration", ylab="w_RNA_S", ylim=c(0, max(pmcmc_res$w_RNA_S)))
abline(h = true_w_RNA_S, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_E, type="l", xlab="iteration", ylab="w_RNA_E", ylim=c(0, max(pmcmc_res$w_RNA_E)))
abline(h = true_w_RNA_E, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_I, type="l", xlab="iteration", ylab="w_RNA_I", ylim=c(0, max(pmcmc_res$w_RNA_I)))
abline(h = true_w_RNA_I, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_H, type="l", xlab="iteration", ylab="w_RNA_H", ylim=c(0, max(pmcmc_res$w_RNA_H)))
abline(h = true_w_RNA_H, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_RNA_R, type="l", xlab="iteration", ylab="w_RNA_R", ylim=c(0, max(pmcmc_res$w_RNA_R)))
abline(h = true_w_RNA_R, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_S, type="l", xlab="iteration", ylab="w_Ser_S", ylim=c(0, max(pmcmc_res$w_Ser_S)))
abline(h = true_w_Ser_S, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_E, type="l", xlab="iteration", ylab="w_Ser_E", ylim=c(0, max(pmcmc_res$w_Ser_E)))
abline(h = true_w_Ser_E, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_I, type="l", xlab="iteration", ylab="w_Ser_I", ylim=c(0, max(pmcmc_res$w_Ser_I)))
abline(h = true_w_Ser_I, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_H, type="l", xlab="iteration", ylab="w_Ser_H", ylim=c(0, max(pmcmc_res$w_Ser_H)))
abline(h = true_w_Ser_H, col="red")
plot(1:nrow(pmcmc_res), pmcmc_res$w_Ser_R, type="l", xlab="iteration", ylab="w_Ser_R", ylim=c(0, max(pmcmc_res$w_Ser_R)))
abline(h = true_w_Ser_R, col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_H), type="l", xlab="iteration", ylab="prob_Penn_H", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_H))))
abline(h = inv.logit(true_logit_prob_Penn_H), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_R), type="l", xlab="iteration", ylab="prob_Penn_R", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_R))))
abline(h = inv.logit(true_logit_prob_Penn_R), col="red")
plot(1:nrow(pmcmc_res), inv.logit(pmcmc_res$logit_prob_Penn_D), type="l", xlab="iteration", ylab="prob_Penn_D", ylim=c(0, max(inv.logit(pmcmc_res$logit_prob_Penn_D))))
abline(h = inv.logit(true_logit_prob_Penn_D), col="red")
dev.off()
expand.grid(
center=1,
logit_Beta=runif(n=1, max=true_logit_Beta * 0.8, min=true_logit_Beta * 1.2),
logit_phi=runif(n=1, max=true_logit_phi * 0.8, min=true_logit_phi * 1.2),
logit_psi=runif(n=1, max=true_logit_psi * 0.8, min=true_logit_psi * 1.2),
logit_gamma_one=runif(n=1, max=true_logit_gamma_one * 0.8, min=true_logit_gamma_one * 1.2),
logit_gamma_two=runif(n=1, max=true_logit_gamma_two * 0.8, min=true_logit_gamma_two * 1.2),
logit_theta_one=runif(n=1, max=true_logit_theta_one * 0.8, min=true_logit_theta_one * 1.2),
logit_theta_two=runif(n=1, max=true_logit_theta_two * 0.8, min=true_logit_theta_two * 1.2),
logit_eta=runif(n=1, max=true_logit_eta * 0.8, min=true_logit_eta * 1.2),
sample_size_RNA=25,
sample_size_Ser=50,
w_RNA_S=runif(n=1, min=true_w_RNA_S * 0.5, max=true_w_RNA_S * 1.5),
w_RNA_R=runif(n=1, min=true_w_RNA_R * 0.5, max=true_w_RNA_R * 1.5),
w_RNA_E=runif(n=1, min=true_w_RNA_E * 0.5, max=true_w_RNA_E * 1.5),
w_RNA_I=runif(n=1, min=true_w_RNA_I * 0.5, max=true_w_RNA_I * 1.5),
w_RNA_H=runif(n=1, min=true_w_RNA_H * 0.5, max=true_w_RNA_H * 1.5),
w_Ser_S=runif(n=1, min=true_w_Ser_S * 0.5, max=true_w_Ser_S * 1.5),
w_Ser_E=runif(n=1, min=true_w_Ser_E * 0.5, max=true_w_Ser_E * 1.5),
w_Ser_I=runif(n=1, min=true_w_Ser_I * 0.5, max=true_w_Ser_I * 1.5),
w_Ser_H=runif(n=1, min=true_w_Ser_H * 0.5, max=true_w_Ser_H * 1.5),
w_Ser_R=runif(n=1, min=true_w_Ser_R * 0.5, max=true_w_Ser_R * 1.5),
logit_prob_Penn_H=runif(n=1, max=true_logit_prob_Penn_H * 0.8, min=true_logit_prob_Penn_H * 1.2),
logit_prob_Penn_R=runif(n=1, max=true_logit_prob_Penn_R * 0.8, min=true_logit_prob_Penn_R * 1.2),
logit_prob_Penn_D=runif(n=1, max=true_logit_prob_Penn_D * 0.8, min=true_logit_prob_Penn_D * 1.2),
N=10000
) -> p
foreach (theta=iter(p,"row"),
.combine=rbind,
.inorder=FALSE) %dopar% {
library(pomp)
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior,
params=theta
) -> covid_pomp
covid_pomp %>% pmcmc(
start = theta,
Nmcmc = 10000,
Np = 100,
proposal = mvn.diag.rw(rw.sd)
) -> pmcmc
as.data.frame(pmcmc@traces)
} -> pmcmc_res
foreach (theta=iter(p,"row"),
.combine=rbind,
.inorder=FALSE) %dopar% {
library(pomp)
simulated_infestation %>%
pomp(times="day",t0=0,
rprocess=euler(sir_step, delta.t=1),
rinit=sir_init,
dmeasure=dmeas,
rmeasure=rmeas,
statenames=c("S", "E", "I", "H", "R", "D"),
paramnames=c("logit_Beta", "logit_phi", "logit_psi",
"logit_gamma_one", "logit_gamma_two", "logit_theta_one", "logit_theta_two",
"logit_eta",
"sample_size_RNA", "sample_size_Ser",
"w_RNA_S", "w_RNA_R",
"w_RNA_E", "w_RNA_I", "w_RNA_H",
"w_Ser_S", "w_Ser_E",
"w_Ser_I", "w_Ser_H", "w_Ser_R",
"logit_prob_Penn_H", "logit_prob_Penn_R", "logit_prob_Penn_D"),
dprior=covid_pomp.dprior,
params=theta
) -> covid_pomp
covid_pomp %>% pmcmc(
start = theta,
Nmcmc = 5000,
Np = 300,
proposal = mvn.diag.rw(rw.sd)
) -> pmcmc
as.data.frame(pmcmc@traces)
} -> pmcmc_res
